import{_ as p,c as h,J as i,m as s,a as t,V as k,o,E as a}from"./chunks/framework.WH0rnJL5.js";const v=JSON.parse('{"title":"为 Nginx 配置 TCP 反向代理","description":"","frontmatter":{"tags":["计算机/网络/网关/Nginx","计算机/网络/网关","计算机/网络/网关/OpenResty","命令行/systemd","计算机/操作系统/Linux","计算机/操作系统/Linux/命令行","操作系统/Linux","操作系统/Debian","数学/密码学/证书/TLS","数学/密码学/证书/TLS/mTLS","命令行/kubectl","软件/云原生/kubectl","计算机/网络/协议/TCP"]},"headers":[],"relativePath":"笔记/🛠️ 开发/🕸 网络/为 Nginx 配置 TCP 反向代理.md","filePath":"笔记/🛠️ 开发/🕸 网络/为 Nginx 配置 TCP 反向代理.md"}'),r={name:"笔记/🛠️ 开发/🕸 网络/为 Nginx 配置 TCP 反向代理.md"},d=s("h1",{id:"为-nginx-配置-tcp-反向代理",tabindex:"-1"},[t("为 Nginx 配置 TCP 反向代理 "),s("a",{class:"header-anchor",href:"#为-nginx-配置-tcp-反向代理","aria-label":'Permalink to "为 Nginx 配置 TCP 反向代理"'},"​")],-1),c=k(`<h2 id="在-nginx-主配置中添加可复用配置" tabindex="-1">在 Nginx 主配置中添加可复用配置 <a class="header-anchor" href="#在-nginx-主配置中添加可复用配置" aria-label="Permalink to &quot;在 Nginx 主配置中添加可复用配置&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-nzvv3" id="tab-wLu-yYF" checked="checked"><label for="tab-wLu-yYF">输出日志为 JSON</label><input type="radio" name="group-nzvv3" id="tab-18Yyhzn"><label for="tab-18Yyhzn">输出日志为普通纯文本</label></div><div class="blocks"><div class="language-nginx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	log_format </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">tcp_json </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;{&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;@timestamp&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">time_iso8601</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &#39;&quot;remote_addr&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;protocol&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">protocol</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;status&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;bytes_sent&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">bytes_sent</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;bytes_received&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">bytes_received</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;session_time&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">session_time</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;upstream_addr&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">upstream_addr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        &#39;&quot;upstream_bytes_sent&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">upstream_bytes_sent</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;upstream_bytes_received&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">upstream_bytes_received</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;,&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">		&#39;&quot;upstream_connect_time&quot;: &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">upstream_connect_time</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">	&#39;}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	access_log </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/var/log/nginx/tcp-access.log tcp_json buffer=512k flush=1m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	include </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/etc/nginx/tcp.d/*.conf;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	log_format </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">tcp_plain </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">remote_addr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> [$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">time_local</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">] &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">	        &#39;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">protocol</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">status</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">bytes_sent</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">bytes_received</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">            &#39;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">session_time</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">upstream_addr</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">            &#39;&quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">upstream_bytes_sent</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot; &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">upstream_bytes_received</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot; &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">upstream_connect_time</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	access_log </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/var/log/nginx/tcp-access.log tcp_plain buffer=512k flush=1m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	include </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">/etc/nginx/tcp.d/*.conf;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></div></div><p>说明：</p><ul><li><code>log_format</code>：这里我使用的 JSON 为格式的日志输出，方便采集和处理，如果你不需要 JSON 格式，也可以在上方切换换成非 JSON 格式的配置文件然后参考配置。</li><li><code>access_log</code>：输出到 <code>/var/log/nginx/tcp-access.log</code>，与 HTTP 请求的日志不同，HTTP 的放在 <code>/var/log/nginx/access.log</code> 里面，当然你也可以混合存放。</li><li><code>include</code>：与普通的 HTTP 虚拟主机配置通常存放在 <code>/etc/nginx/conf.d</code> 或者在 Debian 系列的发行版中的 <code>/etc/nginx/sites-enabled</code> 和 <code>/etc/nginx/sites-available</code> 类似，我们也创建一个 <code>/etc/nginx/tcp.d</code> 来存放我们的 TCP 代理。</li></ul><p>你可以通过下面的命令来检查配置文件是否配置正确：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx -t</span></span></code></pre></div><p>配置保存后我们可以通过下面的命令更新配置：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-3kCB9" id="tab-0zBBu3m" checked="checked"><label for="tab-0zBBu3m">重载配置</label><input type="radio" name="group-3kCB9" id="tab-GtRGxYm"><label for="tab-GtRGxYm">重启 Nginx Systemd 单元</label></div><div class="blocks"><div class="language-shell vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx -s reload</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> systemctl restart nginx</span></span></code></pre></div></div></div><p>然后这个时候可以添加我们的 TCP 反向代理目标了。</p><h2 id="添加-tcp-反向代理配置模块" tabindex="-1">添加 TCP 反向代理配置模块 <a class="header-anchor" href="#添加-tcp-反向代理配置模块" aria-label="Permalink to &quot;添加 TCP 反向代理配置模块&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-iJ4AJ" id="tab-AJXusMp" checked="checked"><label for="tab-AJXusMp">配置反代理其他各种服务</label><input type="radio" name="group-iJ4AJ" id="tab-BMHfD0p"><label for="tab-BMHfD0p">配置 TLS 反代理其他各种服务</label><input type="radio" name="group-iJ4AJ" id="tab-WbsDHLP"><label for="tab-WbsDHLP">配置 mTLS 反代理其他各种服务</label></div><div class="blocks"><div class="language-nginx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> &lt;上游名称&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;IP&gt;:&lt;端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;网关层希望暴露的端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    proxy_connect_timeout </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">30s;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;上游名称&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> &lt;上游名称&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;IP&gt;:&lt;端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;网关层希望暴露的端口&gt; ssl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     &lt;证书路径&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;证书私钥路径&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    proxy_connect_timeout </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">30s;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;上游名称&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> &lt;上游名称&gt; </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;IP&gt;:&lt;端口&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;网关层希望暴露的端口&gt; ssl;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     &lt;证书路径&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;证书私钥路径&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	ssl_client_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;用于验证客户端证书的证书 CA 链或者单 CA 证书路径&gt;;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    ssl_verify_client </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">on;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    ssl_verify_depth </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    proxy_connect_timeout </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">30s;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;上游名称&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></div></div><p>以暴露 Kubernetes 集群为例：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">upstream</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> kubernetes_api_server_tcp </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;控制平面（Control Plane）节点 IP&gt;:6443;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	# 如果部署了多个控制平面的话</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;控制平面（Control Plane）节点 IP 2&gt;:6443;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> &lt;控制平面（Control Plane）节点 IP 3&gt;:6443;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">6443;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    proxy_connect_timeout </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">30s;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">kubernetes_api_server_tcp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="观察日志输出" tabindex="-1">观察日志输出 <a class="header-anchor" href="#观察日志输出" aria-label="Permalink to &quot;观察日志输出&quot;">​</a></h2><p>比如对 Kubernetes 的 API Server 配置了 TCP 反向代理进行暴露之后可以运行 <code>kubectl</code> 来获取集群资源看看效果：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> get nodes</span></span></code></pre></div><p>这个时候就可以通过下面的命令同步输出 Nginx 的 TCP 反向代理日志：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tail -f /var/log/nginx/tcp-access.log</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> sudo tail -f /var/log/nginx/tcp-access.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">&quot;@timestamp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;2023-10-14T16:09:35+08:00&quot;,&quot;remote_addr&quot;: &quot;10.0.2.145&quot;,&quot;protocol&quot;: &quot;TCP&quot;,&quot;status&quot;: &quot;200&quot;,&quot;bytes_sent&quot;: &quot;44205&quot;,&quot;bytes_received&quot;: &quot;3690&quot;,&quot;session_time&quot;: &quot;0.351&quot;,&quot;upstream_addr&quot;: &quot;10.24.0.2:6443&quot;,&quot;upstream_bytes_sent&quot;: &quot;3690&quot;,&quot;upstream_bytes_received&quot;: &quot;44205&quot;,&quot;upstream_connect_time&quot;: &quot;0.000&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">&quot;@timestamp&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;2023-10-14T16:09:37+08:00&quot;,&quot;remote_addr&quot;: &quot;10.0.2.145&quot;,&quot;protocol&quot;: &quot;TCP&quot;,&quot;status&quot;: &quot;200&quot;,&quot;bytes_sent&quot;: &quot;13264&quot;,&quot;bytes_received&quot;: &quot;1909&quot;,&quot;session_time&quot;: &quot;0.029&quot;,&quot;upstream_addr&quot;: &quot;10.24.0.2:6443&quot;,&quot;upstream_bytes_sent&quot;: &quot;1909&quot;,&quot;upstream_bytes_received&quot;: &quot;13264&quot;,&quot;upstream_connect_time&quot;: &quot;0.000&quot;}</span></span></code></pre></div><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>`,20),g=s("h2",{id:"文件历史",tabindex:"-1"},[t("文件历史 "),s("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function u(y,B,C,q,_,F){const n=a("NolebasePageProperties"),e=a("NolebaseGitContributors"),l=a("NolebaseGitChangelog");return o(),h("div",null,[d,i(n),c,i(e),g,i(l)])}const b=p(r,[["render",u]]);export{v as __pageData,b as default};
