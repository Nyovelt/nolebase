import{_ as r,c as l,J as t,m as e,a as s,V as g,o as c,E as i}from"./chunks/framework.afRX3mrX.js";const A=JSON.parse('{"title":"Awesome dist system testing papers","description":"","frontmatter":{"tags":["Research","Testing"]},"headers":[],"relativePath":"Notes/Research/Papers/Testing/Awesome dist system testing papers.md","filePath":"Notes/Research/Papers/Testing/Awesome dist system testing papers.md"}'),u={name:"Notes/Research/Papers/Testing/Awesome dist system testing papers.md"},d=e("h1",{id:"awesome-dist-system-testing-papers",tabindex:"-1"},[s("Awesome dist system testing papers "),e("a",{class:"header-anchor",href:"#awesome-dist-system-testing-papers","aria-label":'Permalink to "Awesome dist system testing papers"'},"​")],-1),p=g('<ul><li><p><strong>Anvil: Verifying Liveness of Cluster Management Controllers</strong></p><ul><li>Tianyin Xu, OSDI 24 Best Paper</li><li>A <strong>formal verification</strong> framework to verify the correctness (not only the safety, but also the <em>liveness</em>) of Kubenetes Controller</li></ul></li><li><p><strong>Acto: Automatic End-to-End Testing for Operation Correctness of Cloud System Management</strong></p><ul><li>Tianyin Xu, Owolabi, SOSP 23</li><li>An end-to-end tester for Kubenetes Operators. Acto continuously instructs an operator to reconcile a system to <strong>different states</strong> and <strong>checks</strong> if the system success-fully reaches those desired states.</li></ul></li><li><p><strong>Push-Button Reliability Testing for Cloud-Backed Applications with Rainmaker</strong></p><ul><li>Tianyin Xu, NSDI 23</li><li>Automatic restful <strong>api fault hijacking and injection</strong></li><li>Related works: fault injection techniques and error-handling analysis for cloud apps testing</li></ul></li><li><p><strong>Automatic Reliability Testing for Cluster Management Controllers</strong></p><ul><li>Tianyin Xu, OSDI 22</li><li>Automated reliability testing for Kubenetes controller, by <strong>Systematic Perturbation Testing</strong> and <strong>Differential Test Oracles</strong></li></ul></li><li><p><strong>Testing Configuration Changes in Context to Prevent Production Failures</strong> (CTest)</p><ul><li>Tianyin, Owolabi, OSDI 20</li><li>CTest tested configuration changes by re-do tests related to the configuration change context, and ctest can be generated from existing tests.</li></ul></li><li><p><strong>Do Not Blame Users for Misconfigurations</strong></p><ul><li>Tianyin, SOSP 13</li><li>Using <strong>Static Analysis</strong> to Infer Configuration Constraints</li></ul></li><li><p><strong>Efficient Exposure of Partial Failure Bugs in Distributed Systems with Inferred Abstract States</strong></p><ul><li>Peng (Ryan) Huang, NSDI 2024</li><li>Use static analysis to automatically infers abstract states from distributed system code to make fault injection. It use <strong>Budgeted-State-Round-Robin (BSRR) Algorithm</strong> to guide fault injection decisions.</li></ul></li><li><p><strong>Run-Time Prevention of Software Integration Failures of Machine Learning APIs</strong></p><ul><li>Shan Lu, OOPSLA 2023</li><li>preventing integration failures in software applications using <strong>machine learning (ML) APIs</strong><ul><li>exceptions, mismatching ....</li></ul></li></ul></li><li><p><strong>Automated Verification of Idempotence for Stateful Serverless Applications</strong></p><ul><li>Haibo Chen, OSDI 2023</li><li><strong>Verification</strong> of Idempotence for Serverless</li></ul></li><li><p><strong>Fail through the Cracks: Cross-System Interaction Failures in Modern Cloud Systems</strong></p><ul><li>Tianyin Xu, Yongle Zhang, EuroSys 23</li><li>Cloud system reliability is affected not only bythe reliability of each individual system, but also by the interplay between these systems.</li><li>Open-Source CSI Failure <strong>Dataset</strong></li><li>Cross-System Testing: check whether the two systems, Spark and Hive, each process data consistently by writing the data and then reading it through various interfaces of the two systems.</li></ul></li><li><p><strong>Understanding and Detecting Software Upgrade Failures in Distributed Systems</strong></p><ul><li>Shan Lu, Yongle Zhang, Ding Yuan, SOSP 21</li><li>A <strong>static checkers</strong> DUPChecker</li><li>Related Work: automated testing</li><li>we designed a static checker DUPChecker to search for two types of data-syntax incompatibility across versions: <ul><li>(type-1) on data defined by serialization libraries and</li><li>(type-2) on data of enum types,</li></ul></li></ul></li><li><p><strong>Simple Testing Can Prevent Most Critical Failures</strong></p><ul><li>Ding Yuan, Yongle Zhang, OSDI 14</li><li>We ex-tracted three simple rules from the bugs that have lead to some of the catastrophic failures, and developed a <strong>static checker</strong>, Aspirator, capable of locating these bugs</li></ul></li><li></li></ul><h2 id="contributor" tabindex="-1">Contributor <a class="header-anchor" href="#contributor" aria-label="Permalink to &quot;Contributor&quot;">​</a></h2>',2),h=e("h2",{id:"changelog",tabindex:"-1"},[s("Changelog "),e("a",{class:"header-anchor",href:"#changelog","aria-label":'Permalink to "Changelog"'},"​")],-1);function m(f,y,b,S,_,C){const n=i("NolebasePageProperties"),o=i("NolebaseGitContributors"),a=i("NolebaseGitChangelog");return c(),l("div",null,[d,t(n),p,t(o),h,t(a)])}const T=r(u,[["render",m]]);export{A as __pageData,T as default};
