import{_ as k,c as d,J as a,m as s,w as e,a as i,V as l,E as t,o as c}from"./chunks/framework.WH0rnJL5.js";const p="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-42.A2p6mffI.mov",m="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-52.1RzkMzvx.png",y="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-43.IAMnLAX3.png",g="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-44.lPKACbn6.png",B="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-45.vozzZ8Bl.png",E="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-46.sO6bqoxs.png",A="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-47.5_zwI0PT.png",_="/assets/unity-movement-animation-of-2d-top-down-characters-recording-47.Fu5fOF9N.mov",F="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-48.-uzaD2e_.png",u="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-49.i7mWU-jg.png",C="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-50.ABgM2yF0.png",f="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-51.j_EnNzZo.png",D="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-1.C4s5zAmh.png",b="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-2.YQCcfOgB.png",v="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-3.9LP1fSU8.png",P="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-4.KslXzw1b.png",w="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-5.e77ZcYl0.png",S="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-6._BhgMGFg.png",q="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-7.IF112l9X.png",x="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-8.-oScRdOK.png",T="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-9.Sa9wiybb.png",U="/assets/unity-movement-animation-of-2d-top-down-characters-recoding-10.EtYMjPcL.mov",I="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-11.rb6aEdwN.png",M="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-12.za6WZfas.png",N="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-19.oBH7pWtx.png",G="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-20.wIFz4j8h.png",V="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-21.hIaNP_R1.png",O="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-22.4OIcXTgj.png",j="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-23.rIAu6DOt.png",H="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-24.jnP7eNts.png",R="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-25.93DyGgUt.png",z="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-26.tD3xMs_g.png",W="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-27.HB9YyNYt.png",Y="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-28.fsSj41qS.png",L="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-29.kW3C9DYG.png",Q="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-30.pkrENjj_.png",Z="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-31.E5nAckil.png",K="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-32.AlPxhnHc.png",X="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-33.4Qk0b2kS.png",$="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-34.218CyeoP.png",J="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-35.YWq-rsuq.png",ss="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-36.ApiI1ylc.png",is="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-37.6D1QoPyD.png",as="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-38.cxSRNOfV.png",ts="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-39.eZBxcFQN.png",ns="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-40.NCpvQLCd.png",es="/assets/unity-movement-animation-of-2d-top-down-characters-screenshot-41.-jKHUsP8.png",Cs=JSON.parse('{"title":"用几行代码和 Unity 制作一只带动画的 2D 俯视角移动小猫咪","description":"","frontmatter":{"tags":["开发/游戏","开发/游戏/Unity","游戏/分类/俯视角","开发/CSharp","开发/游戏/动画","操作系统/macOS","软件/macOS/Affinity-Photo","游戏/分类/2D视角","游戏/分类/像素画风","艺术/美术/画风/像素","艺术/美术/游戏开发/动画","艺术/美术/游戏开发/精灵图","艺术/美术/游戏开发/资产处理"]},"headers":[],"relativePath":"笔记/🎮 游戏/🎮 游戏开发/Unity/用几行代码和 Unity 制作一只带动画的 2D 俯视角移动小猫咪.md","filePath":"笔记/🎮 游戏/🎮 游戏开发/Unity/用几行代码和 Unity 制作一只带动画的 2D 俯视角移动小猫咪.md"}'),ls={name:"笔记/🎮 游戏/🎮 游戏开发/Unity/用几行代码和 Unity 制作一只带动画的 2D 俯视角移动小猫咪.md"},ps=s("h1",{id:"用几行代码和-unity-制作一只带动画的-2d-俯视角移动小猫咪",tabindex:"-1"},[i("用几行代码和 Unity 制作一只带动画的 2D 俯视角移动小猫咪 "),s("a",{class:"header-anchor",href:"#用几行代码和-unity-制作一只带动画的-2d-俯视角移动小猫咪","aria-label":'Permalink to "用几行代码和 Unity 制作一只带动画的 2D 俯视角移动小猫咪"'},"​")],-1),hs=l('<p>周末参加 GameJam 2024 中国的时候基本上是把 Unity 的人物移动和动画相关的知识点学了一下，跟着很厉害的 YouTube 大佬做了一个很可爱的会动的像素画小猫咪。</p><p>效果是这样的：</p><video controls muted><source src="'+p+'" type="video/mp4"></video><h2 id="从-unity-hub-创建-2d-sample-项目" tabindex="-1">从 Unity Hub 创建 2D Sample 项目 <a class="header-anchor" href="#从-unity-hub-创建-2d-sample-项目" aria-label="Permalink to &quot;从 Unity Hub 创建 2D Sample 项目&quot;">​</a></h2><p><img src="'+m+'" alt=""></p><h2 id="下载游戏素材" tabindex="-1">下载游戏素材 <a class="header-anchor" href="#下载游戏素材" aria-label="Permalink to &quot;下载游戏素材&quot;">​</a></h2><p>在 Unity Asset Store 下载免费的小猫咪资源就好了！</p>',7),os=l('<h2 id="创建一个新的-2d-游戏对象-gameobject" tabindex="-1">创建一个新的 2D 游戏对象（GameObject） <a class="header-anchor" href="#创建一个新的-2d-游戏对象-gameobject" aria-label="Permalink to &quot;创建一个新的 2D 游戏对象（GameObject）&quot;">​</a></h2><p><img src="'+y+'" alt=""></p><p>修改这个 Player Game Object 的名字为 Player 而不是默认的 Square。</p><p>这样的操作可以在 Unity 界面的左侧的 Hierarchy 面板中找到 Player 这个游戏对象，点选之后在右侧的 Inspector 找到如下图所示的输入框并且键入自己喜欢的名字来修改它：</p><p><img src="'+g+'" alt=""></p><p>修改完成之后，我们需要附着和配置我们下载好的精灵图中的小猫咪的图。</p><p>先在 Unity 界面的左侧的 Hierarchy 面板中找到 Player 这个游戏对象，点选激活 Player 对象，确保右侧的 Inspector 上方显示的是 Player 的名字。</p><p>接下来，在下载好的资源目录中，找到自己喜欢的小猫咪的 Idle 状态的精灵图到右侧 Inspector 下方附属的 Sprite Renderer 的 Sprite 输入框中：</p><p><img src="'+B+'" alt=""></p><p>拖放完成后，就会是这样的界面状态：</p><p><img src="'+E+'" alt=""></p><h2 id="为-player-添加-2d-刚体" tabindex="-1">为 Player 添加 2D 刚体 <a class="header-anchor" href="#为-player-添加-2d-刚体" aria-label="Permalink to &quot;为 Player 添加 2D 刚体&quot;">​</a></h2><p><img src="'+A+'" alt=""></p><p>添加之后可以点击正上方的「游玩」按钮然后看看效果：</p><video controls muted><source src="'+_+'" type="video/mp4"></video><p>可以发现小猫咪会直接掉下去，这是因为我们的小猫咪现在在默认的 <code>Rigibody 2D</code> 对象的影响下，默认会带有数值为 <code>1</code> 的重力。</p><p>要修复这个问题，可以通过右侧 Inspector 下方附属的 <code>Rigibody 2D</code> 的组件选单中的 <code>Gravity Scale</code> 栏位中将数据从 <code>1</code> 修改为 <code>0</code> 来解决：</p><p><img src="'+F+'" alt=""></p><p>再次点击游玩的时候就能发现小猫咪不再会掉下去了，但是小猫咪没有任何反应。</p><h2 id="为-player-添加接收键盘事件的控制用脚本" tabindex="-1">为 Player 添加接收键盘事件的控制用脚本 <a class="header-anchor" href="#为-player-添加接收键盘事件的控制用脚本" aria-label="Permalink to &quot;为 Player 添加接收键盘事件的控制用脚本&quot;">​</a></h2><h3 id="创建一个-script-组件到-player-对象" tabindex="-1">创建一个 Script 组件到 Player 对象 <a class="header-anchor" href="#创建一个-script-组件到-player-对象" aria-label="Permalink to &quot;创建一个 Script 组件到 Player 对象&quot;">​</a></h3><p>在 Unity 界面的左侧的 Hierarchy 面板中找到 Player 这个游戏对象，点选 Player 选中 Player 这个游戏对象（Game Object），然后在右侧的 Inspector 中找到 Add Component 按钮，输入找到「New Script」就可以创建新的脚本了：</p><p><img src="'+u+'" alt=""></p><p>点击「New Script」之后就会提示要输入脚本的名字，可以使用 <code>PlayerMovement</code> 这个作为控制脚本的名字：</p><p><img src="'+C+'" alt=""></p><h3 id="编辑-script-以添加键盘事件处理的代码" tabindex="-1">编辑 Script 以添加键盘事件处理的代码 <a class="header-anchor" href="#编辑-script-以添加键盘事件处理的代码" aria-label="Permalink to &quot;编辑 Script 以添加键盘事件处理的代码&quot;">​</a></h3><p>准备好之后就可以编辑新创建的脚本了。</p><p>在 Unity 界面的左侧的 Hierarchy 面板中找到 Player 这个游戏对象，点选 Player 选中 Player 这个游戏对象（Game Object），然后在右侧的 Inspector 中找到我们刚刚创建的「<code>PlayerMovement</code>」脚本。</p><p>然后点击组件右侧的三个点来展开更多信息菜单，然后点选「Edit Script」来编辑代码文件。</p>',29),rs={class:"tip custom-block"},ks=s("p",{class:"custom-block-title"},"在使用 macOS 进行开发吗？",-1),ds=l('<p><img src="'+f+`" alt=""></p><p>然后我们编写如下的代码：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Generic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UnityEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> PlayerMovement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">MonoBehaviour</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> moveSpeed</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Rigidbody2D</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> rb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    Vector2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Start is called before the first frame update</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Update is called once per frame</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Update</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetAxisRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Horizontal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetAxisRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Vertical&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // FixedUpdate is called once per frame</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> FixedUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        rb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">MovePosition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">rb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">position</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> movement</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> moveSpeed</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">fixedDeltaTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>编辑结束之后，因为我们在代码中声明了一个 <code>public</code>（公开）的名为 <code>rb</code> 的，类型为 <code>Rigibody 2D</code> 的字段，这个字段用来存放我们先前创建的 <code>Rigibody 2D</code> 的组件。</p><p>在 Unity 界面的左侧的 Hierarchy 面板中找到 Player 这个游戏对象，点选 Player 选中 Player 这个游戏对象（Game Object），然后在右侧的 Inspector 中将 <code>Rigibody 2D</code> 拖放配置到 <code>rb</code>：</p><p><img src="`+D+'" alt=""></p><p>这个时候点击正上方的「游玩」按钮就可以看到小猫咪会移动了！</p><h2 id="为-player-添加动画" tabindex="-1">为 Player 添加动画 <a class="header-anchor" href="#为-player-添加动画" aria-label="Permalink to &quot;为 Player 添加动画&quot;">​</a></h2><p>我们的小猫咪暂时没有任何的动画，只会在按下方向键的时候左右平移，我们需要通过预设的静态精灵图（Sprite）资源创建动画。</p><h3 id="创建动画" tabindex="-1">创建动画 <a class="header-anchor" href="#创建动画" aria-label="Permalink to &quot;创建动画&quot;">​</a></h3><p>在 Unity 的「Window」菜单栏选项中找到「Animation」，然后点选「Animation」下方的「Animation」来打开动画界面：</p><p><img src="'+b+'" alt=""></p><p>打开之后应该默认是一个独立的窗口，可以通过将这个窗口拖放到下图指示的区域中让「Animation」吸附和停靠在下方面板中：</p><p><img src="'+v+'" alt=""></p><p>吸附之后就应该变成这样：</p><p><img src="'+P+'" alt=""></p><p>接下来我们需要一个存放和管理动画的地方：</p><ol><li>我们切换项目目录到「<code>Assets</code>」</li><li>然后在空白区域中点击鼠标右键</li><li>在弹出的选单中选择「Create（创建）」来创建一个资源</li><li>选择「Folder」来创建一个存放动画的文件夹</li></ol><p><img src="'+w+'" alt=""></p><p>准备好之后应该是这样的：</p><p><img src="'+S+'" alt=""></p><p>双击目录就可以进入到「<code>Animation</code>」文件夹了（可以通过「Project」面板确认是否在文件夹中）。</p><p>确认之后，</p><ol><li>在 Unity 界面的左侧的 Hierarchy 面板中找到 Player 这个游戏对象</li><li>点选 Player 选中 Player 这个游戏对象（Game Object）</li><li>在中间靠右的「<code>Animation</code>」面板中找到「Create（创建）」按钮</li><li>点击「Create（创建）」按钮来创建一个「<code>Animation</code>（动画）」</li><li>命名为你喜欢的名字，我这里叫 <code>Player_Idle</code>，然后存放到先前创建的「<code>Animation</code>」文件夹中</li></ol><p><img src="'+q+'" alt=""></p><p>创建好之后，我们</p><ol><li>在 Unity 界面的左侧的 Hierarchy 面板中找到 Player 这个游戏对象</li><li>点选 Player 选中 Player 这个游戏对象（Game Object）</li><li>在中间靠右的「<code>Animation</code>」面板中看到现在激活的动画为刚刚创建的「<code>Player_Idle</code>」动画文件：</li></ol><p><img src="'+x+'" alt=""></p><p>现在动画帧里都是空的。</p><p>我们需要</p><ul><li>在左边找到小猫咪 Idle（闲置）的时候的动画精灵图（Sprite）（如果看不到序列帧，可以点击精灵图（Sprite）资源右侧的小箭头来展开）</li><li>将这些动画帧选中并拖放到右侧的动画帧时间线区域中（蓝色线框的区域）</li></ul><p><img src="'+T+'" alt=""></p><p>如果点击「<code>Animation</code>（动画）」面板的播放就可以看到这些动画开始播放了！</p><p>就像这样：</p><video controls muted><source src="'+U+'" type="video/mp4"></video><p>接下来如法炮制，把</p><ul><li>向上走的</li><li>向下走的</li><li>向左走的</li><li>向右走的</li></ul><p>的动画都创建出来。</p><p><img src="'+I+'" alt=""></p><div class="tip custom-block"><p class="custom-block-title">动画太快或者太慢了？</p><p>可以在动画面板的右侧找到三个点，点选之后选择「Show Sample Rate（显示采样频率）」来显示当前的动画帧速率。</p><p><img src="'+M+'" alt=""></p><p>打开之后在「<code>Animation</code>（动画）」面板中的左侧就可以看到新出现的数字，调整这个数字的数值就可以完成动画帧率的编辑和修改了。</p><p><img src="'+N+'" alt=""></p></div><h3 id="通过-animator-动画编辑器-配置状态变化" tabindex="-1">通过 Animator（动画编辑器）配置状态变化 <a class="header-anchor" href="#通过-animator-动画编辑器-配置状态变化" aria-label="Permalink to &quot;通过 Animator（动画编辑器）配置状态变化&quot;">​</a></h3><h4 id="找到-animator-tab" tabindex="-1">找到 Animator Tab <a class="header-anchor" href="#找到-animator-tab" aria-label="Permalink to &quot;找到 Animator Tab&quot;">​</a></h4><p>在「Project（项目）」面板中，找到方框形状的图表，这个就是「Animator（动画器）」类型的资源，点选之后，正中间应该会打开激活一个名为「Animator（动画器）」的新面板，在这个面板中，我们将会需要配置动画切换的过程和切换的时机和对其进行相关的配置。</p><p><img src="'+G+'" alt=""></p><h4 id="设定默认动画" tabindex="-1">设定默认动画 <a class="header-anchor" href="#设定默认动画" aria-label="Permalink to &quot;设定默认动画&quot;">​</a></h4><p>可以看到，当前的界面中，「Empty（空）」状态指向了名为「<code>Player_Walk_up</code>」的动画状态，这意味着在默认情况下，小猫咪的动画将会播放「<code>Player_Walk_up</code>」的动画，而非我们先前指定的「<code>Player_Idle</code>」的闲置动画。</p><p>这个时候可以通过在我们期望配置为「默认状态下的动画」的节点上点击鼠标右键来配置更多的信息，点选「Set as Layer Default State（设置为涂层默认状态）」就可以配置为默认的动画啦：</p><p><img src="'+V+'" alt=""></p><h4 id="移除不必要的状态" tabindex="-1">移除不必要的状态 <a class="header-anchor" href="#移除不必要的状态" aria-label="Permalink to &quot;移除不必要的状态&quot;">​</a></h4><p>我们还会发现这个界面中存在着先前导入的很多其他的动画，可以删掉这些节点。</p><p>框选出这些不要的额外节点，只保留</p><ul><li>Any State</li><li>Empty</li><li><code>Player_Idel</code></li><li>Exit</li></ul><p>这几个节点，对其他的节点右键，然后选择「Delete（删除）」就可以删掉了：</p><p><img src="'+O+'" alt=""></p><h4 id="在-animator-中创建用于水平移动和纵向移动的-parameters-参数" tabindex="-1">在 Animator 中创建用于水平移动和纵向移动的 Parameters（参数） <a class="header-anchor" href="#在-animator-中创建用于水平移动和纵向移动的-parameters-参数" aria-label="Permalink to &quot;在 Animator 中创建用于水平移动和纵向移动的 Parameters（参数）&quot;">​</a></h4><p>接下来我们需要配置新的用于控制动画变化用的给动画专属的参数。</p><p>在「Animator（动画器）」面板中</p><ol><li>切换到「Parameters（参数）」标签页</li><li>点选右侧的「加号」来展开新建菜单</li><li>点选「Float」来创建一个浮点数类型的动画控制参数</li></ol><p><img src="'+j+'" alt=""></p><p>命名为「<code>Horizontal</code>」，作为水平移动时会修改的参数。</p><blockquote><p>名字可以随便取的，只要作为开发者的你看得懂就行，之后会通过界面拖放的方式来配置这些参数的，无需担心命名规范。</p></blockquote><p>接下来重复上面的步骤，创建名为「<code>Vertical</code>」，类型为「<code>Float</code>」的另一个参数。</p><h4 id="在-animator-中创建一个新的-blend-tree-节点" tabindex="-1">在 Animator 中创建一个新的 Blend Tree 节点 <a class="header-anchor" href="#在-animator-中创建一个新的-blend-tree-节点" aria-label="Permalink to &quot;在 Animator 中创建一个新的 Blend Tree 节点&quot;">​</a></h4><p>为了能控制这两个我们新创建的参数 <code>Horizontal</code> 和 <code>Vertical</code>，我们需要一种全新的节点类型，这种节点叫「Blend Tree」。</p><p>在「Animator（动画器）」面板中，</p><ol><li>在右侧的节点编辑器的空白区域中，点击鼠标右键</li><li>然后点选「From New Blend Tree」选项来创建一个新的「Blend Tree」</li></ol><p><img src="'+H+'" alt=""></p><p>创建之后右侧 Inspector 中应该可以看到全新的对于 Blend Tree 的信息和面板。</p><h4 id="配置-blend-tree-的-motion-field-选项" tabindex="-1">配置 Blend Tree 的 Motion Field 选项 <a class="header-anchor" href="#配置-blend-tree-的-motion-field-选项" aria-label="Permalink to &quot;配置 Blend Tree 的 Motion Field 选项&quot;">​</a></h4><p>这个时候我们需要在 Blend Tree 对象信息中，点选右侧下方的「加号」，创建添加一个名为「Motion Field」的配置选项来方便我们控制动画：</p><p><img src="'+R+'" alt=""></p><p>创建好 Motion Field 配置选项之后，可以发现它多了两个参数栏目，我们把向上走和向下走的动画拖拽配置到 Motion Field 的第 1 和第 2 栏目中：</p><p><img src="'+z+'" alt=""></p><p>这个时候我们在 Motion Field 的这个交叉的切换图谱中滑动鼠标，观察左侧节点编辑器内的 <code>Hotizontal</code> 数值就会发现它会跟随着变化：</p><p><img src="'+W+'" alt=""></p><p>现在，为了能实现 <code>Horizontal</code> 的数值修改的时候能激活不同的动画（也就是激活之前拖拽上去的「向上走」和「向下」走的动画），我们需要给这两个栏目配置激活的阈值（也就是 Threshold）。</p><p>在现在配置的 Motion Field 中，</p><ol><li>取消勾选「Automate Threshold」配置选项</li><li>将 <code>Player_Walk_Down</code> 动画栏目的 <code>Threshold</code> 配置为 <code>-1</code></li><li>将 <code>Player_Walk_Up</code> 动画栏目的 <code>Threshold</code> 配置为 <code>1</code></li></ol><p><img src="'+Y+'" alt=""></p><p>配置 Blend Tree 的类型为「2D Simple Directional（2D 简单有方向性的）」来让我们能够映射和配置水平和纵向的数值切换时不同的动画：</p><p><img src="'+L+'" alt=""></p><p>配置完成之后修改 Inspector 中的 Parameters 配置选项中的第二个参数为 <code>Vertical</code></p><p><img src="'+Q+'" alt=""></p><p>接下来配置各项动画的 <code>Threshold</code> 为：</p><ul><li>上：<code>0</code>，<code>1</code></li><li>下：<code>0</code>，<code>-1</code></li><li>左：<code>-1</code>，<code>0</code></li><li>右：<code>1</code>，<code>0</code></li></ul><p><img src="'+Z+'" alt=""></p><p>这个时候看下方的动画界面，与此同时拖动 Inspector 中的 Blend Tree 展示的 2D 小地图的时候就会发现小猫咪会根据配置的数值的阈值不同来切换动画了：</p><p><img src="'+K+'" alt=""></p><p>可以在 Inspector 中修改 Blend Tree 的名字为「Movement」</p><h4 id="在-animator-中创建用于判断速度的-parameters-参数" tabindex="-1">在 Animator 中创建用于判断速度的 Parameters（参数） <a class="header-anchor" href="#在-animator-中创建用于判断速度的-parameters-参数" aria-label="Permalink to &quot;在 Animator 中创建用于判断速度的 Parameters（参数）&quot;">​</a></h4><p>和之前一样，接下来我们需要配置新的用于根据速度不同变换动画的参数。</p><p>在「Animator（动画器）」面板中</p><ol><li>切换到「Parameters（参数）」标签页</li><li>点选右侧的「加号」来展开新建菜单</li><li>点选「Float」来创建一个浮点数类型的动画控制参数</li></ol><p><img src="'+X+'" alt=""></p><p>命名为「<code>Speed</code>」。</p><h4 id="创建动画状态转变规则" tabindex="-1">创建动画状态转变规则 <a class="header-anchor" href="#创建动画状态转变规则" aria-label="Permalink to &quot;创建动画状态转变规则&quot;">​</a></h4><p>现在</p><ol><li>在右侧的节点编辑器上点选「<code>Player_Idle</code>」动画状态</li><li>点击鼠标右键来编辑这个动画状态的配置选项</li><li>选择「Make Transition（制作变换）」来创建动画切换的目标</li></ol><p><img src="'+$+'" alt=""></p><p>点击之后就会有一个跟随鼠标走的箭头。</p><p>我们让这个箭头附着在先前创建的名为「Movement」的 Blend Tree 上：</p><p><img src="'+J+'" alt=""></p><p>这样我们就创建好转变规则了！</p><p>Unity 接下来就会在条件满足的时候切换动画到 <code>Movement</code> 动画。</p><p>如何配置条件呢？</p><ul><li>在节点编辑器中找到转变动画的箭头</li><li>在右侧 Inspector 中配置箭头的参数</li><li>在 BlendTree Parameters 配置选项的部分中配置「Conditions（条件）」，意味着我们正在配置并告知 Unity，在什么参数，满足什么条件的时候，切换和转变动画</li><li>现在配置三个值 <ul><li>配置第一个下拉菜单为 Speed</li><li>配置第二个下拉菜单为 Greater（大于）</li><li>第三个输入框填写 <code>0.01</code></li></ul></li></ul><p>现在我们创建了一条规则，告诉 Unity：在我们先前创建的 <code>Speed</code> 参数大于 <code>0.01</code> 的时候将动画切换为 <code>Movement</code></p><p><img src="'+ss+'" alt=""></p><p>但是光切换为 <code>Movement</code> 是不够的，我们还要让小猫咪在玩家不进行任何操作的时候还原到先前的状态。</p><p>现在</p><ol><li>在节点编辑器中对着 <code>Movement</code> 动画状态</li><li>点击鼠标右键，选择「Make Transition」</li><li>拖放这个箭头到 <code>Player_Idle</code> 动画状态上</li></ol><p>和之前一样，我们需要告诉 Unity 何时切换 <code>Movement</code> 动画为 <code>Player_Idle</code>。</p><p>现在</p><ol><li>在节点编辑器中找到转变动画的箭头</li><li>在右侧 Inspector 中配置箭头的参数</li><li>在 BlendTree Parameters 配置选项的部分中配置「Conditions（条件）」，意味着我们正在配置并告知 Unity，在什么参数，满足什么条件的时候，切换和转变动画</li><li>现在配置三个值 <ul><li>配置第一个下拉菜单为 Speed</li><li>配置第二个下拉菜单为 Less（大于）</li><li>第三个输入框填写 <code>0.01</code></li></ul></li></ol><p>现在我们创建了一条规则，告诉 Unity：在我们先前创建的 <code>Speed</code> 参数小于 <code>0.01</code> 的时候将动画切换回 <code>Player_Idle</code></p><p><img src="'+is+'" alt=""></p><p>不过现在如果我们直接去看动画的话会有点奇怪，这个时候可以给两个箭头的动画转变都取消勾选「Has Exit Time（具有退出时间）」：</p><p><img src="'+as+'" alt=""></p><h4 id="通过-animator-在运行过程中动态地调试动画" tabindex="-1">通过 Animator 在运行过程中动态地调试动画 <a class="header-anchor" href="#通过-animator-在运行过程中动态地调试动画" aria-label="Permalink to &quot;通过 Animator 在运行过程中动态地调试动画&quot;">​</a></h4><p>现在，我们点击上方的游玩按钮，然后将「Animator（动画器）」面板放置于「Game」面板的右侧的时候，就可以看到实时的动画状态了：</p><p><img src="'+ts+'" alt=""></p><p>如果直接修改这个 <code>Speed</code> 数值就可以看到动画被切换了！</p><p><img src="'+ns+`" alt=""></p><h3 id="应用动画到-player-上" tabindex="-1">应用动画到 Player 上 <a class="header-anchor" href="#应用动画到-player-上" aria-label="Permalink to &quot;应用动画到 Player 上&quot;">​</a></h3><p>现在我们要让动画能够和用户事件关联起来。</p><p>再次打开我们的 <code>PlayerMovement</code> 的 C# 脚本，编辑修改代码为这样：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light one-dark-pro has-diff vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Collections</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Generic</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UnityEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> PlayerMovement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">MonoBehaviour</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> speed</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1f</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Rigidbody2D</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> rb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Animator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> animator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    Vector2</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Start is called before the first frame update</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Update is called once per frame</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Update</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line diff remove"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">		movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetAxisRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Horizontal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line diff remove"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">		movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetAxisRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Vertical&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // FixedUpdate is called once per physics update</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> FixedUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // Input</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetAxisRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Horizontal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Input</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetAxisRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Vertical&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // Animation</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        animator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">SetFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Horizontal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        animator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">SetFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Vertical&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // use the magnitude of the vector to determine the speed of the animation</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        animator</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">SetFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Speed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">movement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">sqrMagnitude</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // Movement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        rb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">MovePosition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">rb</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">position</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> movement</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> speed</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">fixedDeltaTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>然后把动画器对象拖放到 <code>PlayerMovement</code> 脚本的 <code>Animator</code> 字段上：</p><p><img src="`+es+'" alt=""></p><p>现在点击游玩按钮，就可以看到这样的效果啦：</p><video controls muted><source src="'+p+'" type="video/mp4"></video><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2>',132),cs=s("h2",{id:"贡献者",tabindex:"-1"},[i("贡献者 "),s("a",{class:"header-anchor",href:"#贡献者","aria-label":'Permalink to "贡献者"'},"​")],-1),ms=s("h2",{id:"文件历史",tabindex:"-1"},[i("文件历史 "),s("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function ys(gs,Bs,Es,As,_s,Fs){const h=t("NolebasePageProperties"),n=t("VPNolebaseInlineLinkPreview"),o=t("NolebaseGitContributors"),r=t("NolebaseGitChangelog");return c(),d("div",null,[ps,a(h),hs,s("p",null,[a(n,{href:"https://assetstore.unity.com/packages/2d/characters/pet-cats-pixel-art-pack-248340",target:"_blank",rel:"noreferrer"},{default:e(()=>[i("Pet Cats Pixel Art Pack | 2D 角色 | Unity Asset Store")]),_:1})]),os,s("div",rs,[ks,s("p",null,[i("如果你遭遇了任何编辑代码的时候的问题，可以通过参考"),a(n,{href:"/笔记/🎮 游戏/🎮 游戏开发/Unity/配置 macOS 上的 VSCode 来编辑 Unity 的 C Sharp 代码.html"},{default:e(()=>[i("配置 macOS 上的 VSCode 来编辑 Unity 的 C Sharp 代码")]),_:1}),i("文档来配置自己的开发环境哦！")])]),ds,s("p",null,[a(n,{href:"https://www.youtube.com/watch?v=whzomFgjT50",target:"_blank",rel:"noreferrer"},{default:e(()=>[i("TOP DOWN MOVEMENT in Unity! - YouTube")]),_:1})]),cs,a(o),ms,a(r)])}const fs=k(ls,[["render",ys]]);export{Cs as __pageData,fs as default};
