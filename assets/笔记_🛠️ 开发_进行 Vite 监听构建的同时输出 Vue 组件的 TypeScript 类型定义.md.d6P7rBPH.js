import{_ as r,c as h,J as i,m as s,a as e,w as a,V as c,E as n,o as k}from"./chunks/framework.WH0rnJL5.js";const S=JSON.parse('{"title":"进行 Vite 监听构建的同时输出 Vue 组件的 TypeScript 类型定义","description":"","frontmatter":{"tags":["开发/前端/Vue","开发/前端/Vue/Vue3","开发/前端/Vite","开发/Nodejs/Vite","开发/Nodejs/TypeScript","开发/Nodejs/npm"]},"headers":[],"relativePath":"笔记/🛠️ 开发/进行 Vite 监听构建的同时输出 Vue 组件的 TypeScript 类型定义.md","filePath":"笔记/🛠️ 开发/进行 Vite 监听构建的同时输出 Vue 组件的 TypeScript 类型定义.md"}'),d={name:"笔记/🛠️ 开发/进行 Vite 监听构建的同时输出 Vue 组件的 TypeScript 类型定义.md"},u=s("h1",{id:"进行-vite-监听构建的同时输出-vue-组件的-typescript-类型定义",tabindex:"-1"},[e("进行 Vite 监听构建的同时输出 Vue 组件的 TypeScript 类型定义 "),s("a",{class:"header-anchor",href:"#进行-vite-监听构建的同时输出-vue-组件的-typescript-类型定义","aria-label":'Permalink to "进行 Vite 监听构建的同时输出 Vue 组件的 TypeScript 类型定义"'},"​")],-1),_=s("p",null,[e("核心是，只需要寻找到一个方式来同时执行 "),s("code",null,"vite build --watch"),e(" 和 "),s("code",null,"vue-tsx --declaration --emitDeclarationOnly"),e(" 这两条命令就好了。")],-1),y=s("code",null,"concurrently",-1),g=c(`<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light one-dark-pro has-diff vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;concurrently </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">nr build:watch</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">nr emit-types</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;emit-types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;vue-tsc --declaration --emitDeclarationOnly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;vite build &amp;&amp; vue-tsc --declaration --emitDeclarationOnly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;build:watch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;vite build --mode development --watch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">  &quot;concurrently&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;^8.2.1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div>`,1),C=s("code",null,"concurrently",-1),B=s("code",null,"slimeform",-1),m=s("code",null,"run-p",-1),b=s("code",null,"run-p",-1),f=s("code",null,"run-p",-1),q=s("h2",{id:"贡献者",tabindex:"-1"},[e("贡献者 "),s("a",{class:"header-anchor",href:"#贡献者","aria-label":'Permalink to "贡献者"'},"​")],-1),V=s("h2",{id:"文件历史",tabindex:"-1"},[e("文件历史 "),s("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function v(F,E,w,N,A,P){const l=n("NolebasePageProperties"),t=n("VPNolebaseInlineLinkPreview"),o=n("NolebaseGitContributors"),p=n("NolebaseGitChangelog");return k(),h("div",null,[u,i(l),_,s("p",null,[e("比如使用 "),i(t,{href:"https://www.npmjs.com/package/concurrently",target:"_blank",rel:"noreferrer"},{default:a(()=>[y]),_:1}),e("：")]),g,s("p",null,[e("当然，除去 "),i(t,{href:"https://www.npmjs.com/package/concurrently",target:"_blank",rel:"noreferrer"},{default:a(()=>[C]),_:1}),e(" 还有很多种方式，在 "),i(t,{href:"https://github.com/LittleSound/slimeform",target:"_blank",rel:"noreferrer"},{default:a(()=>[B]),_:1}),e(" 中使用的 "),i(t,{href:"https://www.npmjs.com/package/run-p",target:"_blank",rel:"noreferrer"},{default:a(()=>[m]),_:1}),e("，你可以使用 "),b,e("，它工作的很好，但 "),f,e(" 其实有一些古早了，而且好久没有再发布过更新了，上一次发布已经是 7 年前，所以根据喜好和需求来选择就好了。")]),q,i(o),V,i(p)])}const x=r(d,[["render",v]]);export{S as __pageData,x as default};
